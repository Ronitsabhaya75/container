name: PR Label Apply

on:
  workflow_run:
    workflows: ["PR Label Analysis"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  apply-labels:
    name: Apply labels to PR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Download PR metadata artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: pr-metadata-*
          merge-multiple: false
        continue-on-error: true
        id: download-artifact
      
      - name: Check if artifact exists
        id: check-artifact
        run: |
          METADATA_DIR=$(find . -type d -name "pr-metadata-*" 2>/dev/null | head -n 1)
          
          if [ -z "$METADATA_DIR" ]; then
            echo "artifact-exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "artifact-exists=true" >> $GITHUB_OUTPUT
          echo "metadata-dir=${METADATA_DIR}" >> $GITHUB_OUTPUT
      
      - name: Read PR metadata
        if: steps.check-artifact.outputs.artifact-exists == 'true'
        id: pr-metadata
        run: |
          METADATA_DIR="${{ steps.check-artifact.outputs.metadata-dir }}"
          
          PR_NUMBER=$(cat "${METADATA_DIR}/pr-number.txt")
          LABELS=$(cat "${METADATA_DIR}/labels.txt" || echo "")
          PR_SHA=$(cat "${METADATA_DIR}/pr-sha.txt" || echo "")
          
          echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "labels=${LABELS}" >> $GITHUB_OUTPUT
          echo "pr-sha=${PR_SHA}" >> $GITHUB_OUTPUT
      
      - name: Apply labels
        if: steps.check-artifact.outputs.artifact-exists == 'true' && steps.pr-metadata.outputs.labels != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.pr-metadata.outputs.pr-number }}');
            const labelsString = '${{ steps.pr-metadata.outputs.labels }}';
            
            if (!labelsString) return;
            
            const labels = labelsString.split(',').map(l => l.trim()).filter(l => l !== '');
            if (labels.length === 0) return;
            
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const currentLabels = pr.labels.map(l => l.name);
              const newLabels = labels.filter(l => !currentLabels.includes(l));
              
              if (newLabels.length === 0) {
                console.log('All labels already applied');
                return;
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: newLabels
              });
              
              core.setOutput('labels-applied', newLabels.join(','));
              core.setOutput('should-comment', 'true');
              
            } catch (error) {
              if (error.status === 404) return;
              throw error;
            }
        id: apply-labels
      
      - name: Post comment
        if: steps.apply-labels.outputs.should-comment == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.pr-metadata.outputs.pr-number }}');
            const labelsString = '${{ steps.apply-labels.outputs.labels-applied }}';
            
            if (!labelsString) return;
            
            const appliedLabels = labelsString.split(',').map(l => l.trim()).filter(l => l !== '');
            if (appliedLabels.length === 0) return;
            
            const labelBadges = appliedLabels.map(l => `\`${l}\``).join(', ');
            const comment = `üè∑Ô∏è **Auto-labeler** has applied the following labels: ${labelBadges}`;
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            } catch (error) {
              console.error('Failed to post comment:', error.message);
            }